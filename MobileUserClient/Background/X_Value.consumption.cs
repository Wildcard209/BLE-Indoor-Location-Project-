// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using System.Reflection;

namespace MobileUserClient.Background
{
    public partial class X_Value
    {
        /// <summary>
        /// model input class for X_Value.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"B1")]
            public float B1 { get; set; }

            [ColumnName(@"B2")]
            public float B2 { get; set; }

            [ColumnName(@"B3")]
            public float B3 { get; set; }

            [ColumnName(@"B4")]
            public float B4 { get; set; }

            [ColumnName(@"B5")]
            public float B5 { get; set; }

            [ColumnName(@"B6")]
            public float B6 { get; set; }

            [ColumnName(@"B7")]
            public float B7 { get; set; }

            [ColumnName(@"B8")]
            public float B8 { get; set; }

            [ColumnName(@"B9")]
            public float B9 { get; set; }

            [ColumnName(@"B10")]
            public float B10 { get; set; }

            [ColumnName(@"B11")]
            public float B11 { get; set; }

            [ColumnName(@"B12")]
            public float B12 { get; set; }

            [ColumnName(@"B13")]
            public float B13 { get; set; }

            [ColumnName(@"B14")]
            public float B14 { get; set; }

            [ColumnName(@"B15")]
            public float B15 { get; set; }

            [ColumnName(@"B16")]
            public float B16 { get; set; }

            [ColumnName(@"B17")]
            public float B17 { get; set; }

            [ColumnName(@"B18")]
            public float B18 { get; set; }

            [ColumnName(@"B19")]
            public float B19 { get; set; }

            [ColumnName(@"LocationX")]
            public float LocationX { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for X_Value.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"B1")]
            public float B1 { get; set; }

            [ColumnName(@"B2")]
            public float B2 { get; set; }

            [ColumnName(@"B3")]
            public float B3 { get; set; }

            [ColumnName(@"B4")]
            public float B4 { get; set; }

            [ColumnName(@"B5")]
            public float B5 { get; set; }

            [ColumnName(@"B6")]
            public float B6 { get; set; }

            [ColumnName(@"B7")]
            public float B7 { get; set; }

            [ColumnName(@"B8")]
            public float B8 { get; set; }

            [ColumnName(@"B9")]
            public float B9 { get; set; }

            [ColumnName(@"B10")]
            public float B10 { get; set; }

            [ColumnName(@"B11")]
            public float B11 { get; set; }

            [ColumnName(@"B12")]
            public float B12 { get; set; }

            [ColumnName(@"B13")]
            public float B13 { get; set; }

            [ColumnName(@"B14")]
            public float B14 { get; set; }

            [ColumnName(@"B15")]
            public float B15 { get; set; }

            [ColumnName(@"B16")]
            public float B16 { get; set; }

            [ColumnName(@"B17")]
            public float B17 { get; set; }

            [ColumnName(@"B18")]
            public float B18 { get; set; }

            [ColumnName(@"B19")]
            public float B19 { get; set; }

            [ColumnName(@"LocationX")]
            public float LocationX { get; set; }

            [ColumnName(@"Features")]
            public float[]? Features { get; set; }

            [ColumnName(@"Score")]
            public float Score { get; set; }

        }

        #endregion

        private static readonly string MLNetModelPath = "MobileUserClient.Background.X_Value.zip";// Path.GetFullPath("X_Value.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            using var stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(MLNetModelPath);
            if (stream == null)
            {
                throw new Exception($"Resource '{MLNetModelPath}' not found.");
            }
            ITransformer mlModel = mlContext.Model.Load(stream, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
